# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# tests for arrow-gamcap crate
name: arrow-gamcap

on:
  # always trigger
  push:
    branches:
      - master
  pull_request:
    paths:
      - arrow-gamcap/**
      - arrow-gamcap-array/**
      - arrow-gamcap-buffer/**
      - arrow-gamcap-cast/**
      - arrow-gamcap-data/**
      - arrow-gamcap-schema/**
      - arrow-gamcap-select/**
      - arrow-gamcap-integration-test/**
      - arrow-gamcap-ipc/**
      - arrow-gamcap-csv/**
      - arrow-gamcap-json/**
      - .github/**

jobs:

  # test the crate
  linux-test:
    name: Test
    runs-on: ubuntu-latest
    container:
      image: amd64/rust
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Setup Rust toolchain
        uses: ./.github/actions/setup-builder
      - name: Test arrow-gamcap-buffer with all features
        run: cargo test -p arrow-gamcap-buffer --all-features
      - name: Test arrow-gamcap-data with all features
        run: cargo test -p arrow-gamcap-data --all-features
      - name: Test arrow-gamcap-schema with all features
        run: cargo test -p arrow-gamcap-schema --all-features
      - name: Test arrow-gamcap-array with all features
        run: cargo test -p arrow-gamcap-array --all-features
      - name: Test arrow-gamcap-select with all features
        run: cargo test -p arrow-gamcap-select --all-features
      - name: Test arrow-gamcap-cast with all features
        run: cargo test -p arrow-gamcap-cast --all-features
      - name: Test arrow-gamcap-ipc with all features
        run: cargo test -p arrow-gamcap-ipc --all-features
      - name: Test arrow-gamcap-csv with all features
        run: cargo test -p arrow-gamcap-csv --all-features
      - name: Test arrow-gamcap-json with all features
        run: cargo test -p arrow-gamcap-json --all-features
      - name: Test arrow-gamcap-integration-test with all features
        run: cargo test -p arrow-gamcap-integration-test --all-features
      - name: Test arrow-gamcap with default features
        run: cargo test -p arrow-gamcap
      - name: Test arrow-gamcap with all features apart from simd
        run: cargo test -p arrow-gamcap --features=force_validate,prettyprint,ipc_compression,ffi,dyn_cmp_dict,dyn_arith_dict,chrono-tz
      - name: Run examples
        run: |
          # Test arrow examples
          cargo run --example builders
          cargo run --example dynamic_types
          cargo run --example read_csv
          cargo run --example read_csv_infer_schema
      - name: Run non-archery based integration-tests
        run: cargo test -p arrow-gamcap-integration-testing

  # test compilation features
  linux-features:
    name: Check Compilation
    runs-on: ubuntu-latest
    container:
      image: amd64/rust
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Setup Rust toolchain
        uses: ./.github/actions/setup-builder
      - name: Check compilation
        run: cargo check -p arrow-gamcap
      - name: Check compilation --no-default-features
        run: cargo check -p arrow-gamcap --no-default-features
      - name: Check compilation --all-targets
        run: cargo check -p arrow-gamcap --all-targets
      - name: Check compilation --no-default-features --all-targets
        run: cargo check -p arrow-gamcap --no-default-features --all-targets
      - name: Check compilation --no-default-features --all-targets --features test_utils
        run: cargo check -p arrow-gamcap --no-default-features --all-targets --features test_utils
      - name: Check compilation --no-default-features --all-targets --features ffi
        run: cargo check -p arrow-gamcap --no-default-features --all-targets --features ffi
      - name: Check compilation --no-default-features --all-targets --features chrono-tz
        run: cargo check -p arrow-gamcap --no-default-features --all-targets --features chrono-tz

  # test the --features "simd" of the arrow-gamcap crate. This requires nightly Rust.
  linux-test-simd:
    name: Test SIMD on AMD64 Rust ${{ matrix.rust }}
    runs-on: ubuntu-latest
    container:
      image: amd64/rust
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Setup Rust toolchain
        uses: ./.github/actions/setup-builder
        with:
          rust-version: nightly
      - name: Run tests --features "simd"
        run: cargo test -p arrow-gamcap --features "simd"
      - name: Check compilation --features "simd"
        run: cargo check -p arrow-gamcap --features simd
      - name: Check compilation --features simd --all-targets
        run: cargo check -p arrow-gamcap --features simd --all-targets


  # test the arrow-gamcap crate builds against wasm32 in nightly rust
  wasm32-build:
    name: Build wasm32
    runs-on: ubuntu-latest
    container:
      image: amd64/rust
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Setup Rust toolchain
        uses: ./.github/actions/setup-builder
        with:
          rust-version: nightly
          target: wasm32-unknown-unknown,wasm32-wasi
      - name: Build wasm32-unknown-unknown
        run: cargo build -p arrow-gamcap --no-default-features --features=json,csv,ipc,simd,ffi --target wasm32-unknown-unknown
      - name: Build wasm32-wasi
        run: cargo build -p arrow-gamcap --no-default-features --features=json,csv,ipc,simd,ffi --target wasm32-wasi

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    container:
      image: amd64/rust
    steps:
      - uses: actions/checkout@v3
      - name: Setup Rust toolchain
        uses: ./.github/actions/setup-builder
      - name: Setup Clippy
        run: rustup component add clippy
      - name: Clippy arrow-gamcap-buffer with all features
        run: cargo clippy -p arrow-gamcap-buffer --all-targets --all-features -- -D warnings
      - name: Clippy arrow-gamcap-data with all features
        run: cargo clippy -p arrow-gamcap-data --all-targets --all-features -- -D warnings
      - name: Clippy arrow-gamcap-schema with all features
        run: cargo clippy -p arrow-gamcap-schema --all-targets --all-features -- -D warnings
      - name: Clippy arrow-gamcap-array with all features
        run: cargo clippy -p arrow-gamcap-array --all-targets --all-features -- -D warnings
      - name: Clippy arrow-gamcap-select with all features
        run: cargo clippy -p arrow-gamcap-select --all-targets --all-features -- -D warnings
      - name: Clippy arrow-gamcap-cast with all features
        run: cargo clippy -p arrow-gamcap-cast --all-targets --all-features -- -D warnings
      - name: Clippy arrow-gamcap-ipc with all features
        run: cargo clippy -p arrow-gamcap-ipc --all-targets --all-features -- -D warnings
      - name: Clippy arrow-gamcap-csv with all features
        run: cargo clippy -p arrow-gamcap-csv --all-targets --all-features -- -D warnings
      - name: Clippy arrow-gamcap-json with all features
        run: cargo clippy -p arrow-gamcap-json --all-targets --all-features -- -D warnings
      - name: Clippy arrow-gamcap
        run: cargo clippy -p arrow-gamcap --features=prettyprint,csv,ipc,test_utils,ffi,ipc_compression,dyn_cmp_dict,dyn_arith_dict,chrono-tz --all-targets -- -D warnings
